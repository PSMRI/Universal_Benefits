name: Build and Push Docker Image

on:
  push:
    branches:
      - features.benefitcreateupdate

jobs:
  # Job 1: Checkout the code and verify commit hashes
  checkout:
    runs-on: ubuntu-latest
    outputs:
      CHANGED_SERVICES: ${{ steps.check_changes.outputs.changed_services }}

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all commit history

      - name: Verify commit hashes
        run: |
          echo "Previous commit hash (before): ${{ github.event.before }}"
          echo "Current commit hash (sha): ${{ github.sha }}"
          git rev-parse ${{ github.event.before }} || echo "Previous commit hash does not exist."
          git rev-parse ${{ github.sha }} || echo "Current commit hash does not exist."
          
      - name: Generate Image Tag
        run: |
          IMAGE_TAG="v1.0.0-$(date +'%Y%m%d-%H%M%S')"  # Create a unique image tag
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # Store the IMAGE_TAG in $GITHUB_ENV

      - name: Check for changes in services
        id: check_changes
        run: |
          CHANGED_SERVICES=""

          echo "Checking for changes in backend/application folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/application"; then
            CHANGED_SERVICES="application"
          fi

          echo "Checking for changes in backend/benefits folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/benefits"; then
            CHANGED_SERVICES="$CHANGED_SERVICES benefits"
          fi

          echo "Checking for changes in backend/customer folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/customer"; then
            CHANGED_SERVICES="$CHANGED_SERVICES customer"
          fi

          echo "Changed services: $CHANGED_SERVICES"
          echo "::set-output name=changed_services::${CHANGED_SERVICES}"

  # Job 2: Build and Push Docker Image for Application
  application:
    needs: checkout
    runs-on: ubuntu-latest
    if: contains(needs.checkout.outputs.changed_services, 'application')

    steps:
      - name: Set up Docker Hub credentials
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image for Application
        run: |
          echo "Building Docker image for application with tag $IMAGE_TAG"
          docker build -t prsm323/application:$IMAGE_TAG ./backend/application
          docker push prsm323/application:$IMAGE_TAG

  # Job 3: Build and Push Docker Image for Benefits
  benefits:
    needs: checkout
    runs-on: ubuntu-latest
    if: contains(needs.checkout.outputs.changed_services, 'benefits')

    steps:
      - name: Set up Docker Hub credentials
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image for Benefits
        run: |
          echo "Building Docker image for benefits with tag $IMAGE_TAG"
          docker build -t prsm323/benefits:$IMAGE_TAG ./backend/benefits
          docker push prsm323/benefits:$IMAGE_TAG

  # Job 4: Build and Push Docker Image for Customer
  customer:
    needs: checkout
    runs-on: ubuntu-latest
    if: contains(needs.checkout.outputs.changed_services, 'customer')

    steps:
      - name: Set up Docker Hub credentials
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Push Docker Image for Customer
        run: |
          echo "Building Docker image for customer with tag $IMAGE_TAG"
          docker build -t prsm323/customer:$IMAGE_TAG ./backend/customer
          docker push prsm323/customer:$IMAGE_TAG

  # Final step to confirm success
  success:
    needs: [application, benefits, customer]
    runs-on: ubuntu-latest
    steps:
      - name: Final success message
        run: |
          echo "Successfully built and pushed Docker images for: ${{ needs.application.outputs.changed_services }} ${needs.benefits.outputs.changed_services} ${needs.customer.outputs.changed_services}"
