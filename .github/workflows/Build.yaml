name: Build and Push Docker Image

on:
  push:
    branches:
      - features.benefitcreateupdate

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all commit history

      # Step 2: Debugging commit hashes
      - name: Verify commit hashes
        run: |
          echo "Previous commit hash (before): ${{ github.event.before }}"
          echo "Current commit hash (sha): ${{ github.sha }}"
          git rev-parse ${{ github.event.before }} || echo "Previous commit hash does not exist."
          git rev-parse ${{ github.sha }} || echo "Current commit hash does not exist."

      # Step 3: Set up Docker Hub credentials
      - name: Docker Hub Login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # Step 4: Generate Image Tag and store it in $GITHUB_ENV
      - name: Generate Image Tag
        run: |
          IMAGE_TAG="v1.0.0-$(date +'%Y%m%d-%H%M%S')"  # Create a unique image tag
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV  # Store the IMAGE_TAG in $GITHUB_ENV

      # Step 5: Debugging git diff output
      - name: Git Diff
        run: |
          echo "Running git diff command to compare commits"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "Git diff failed"
          
          CHANGED_SERVICES=""
          echo "Checking for changes in backend/application folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/application"; then
            CHANGED_SERVICES="application"
          fi
          echo "Checking for changes in backend/benefits folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/benefits"; then
            CHANGED_SERVICES="$CHANGED_SERVICES benefits"
          fi
          echo "Checking for changes in backend/customer folder"
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/customer"; then
            CHANGED_SERVICES="$CHANGED_SERVICES customer"
          fi
          echo "Changed services: $CHANGED_SERVICES"
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV

      # Step 6: Build and push Docker images for the modified services
      - name: Build and Push Image for Application
        if: contains(env.CHANGED_SERVICES, 'application')
        run: |
          echo "Building Docker image for application with tag $IMAGE_TAG"
          docker build -t prsm323/application:$IMAGE_TAG ./backend/application
          docker push prsm323/application:$IMAGE_TAG

      - name: Build and Push Image for Benefits
        if: contains(env.CHANGED_SERVICES, 'benefits')
        run: |
          echo "Building Docker image for benefits with tag $IMAGE_TAG"
          docker build -t prsm323/benefits:$IMAGE_TAG ./backend/benefits
          docker push prsm323/benefits:$IMAGE_TAG

      - name: Build and Push Image for Customer
        if: contains(env.CHANGED_SERVICES, 'customer')
        run: |
          echo "Building Docker image for customer with tag $IMAGE_TAG"
          docker build -t prsm323/customer:$IMAGE_TAG ./backend/customer
          docker push prsm323/customer:$IMAGE_TAG

      # Step 7: Send success or failure message to Teams
      - name: Send Success or Failure Message to Teams
        run: |
          TAG="${{ env.IMAGE_TAG }}"  # Get the image tag
          # Initialize an empty message
          SUCCESS_MESSAGE="Build and Push Successful: "
          FAILURE_MESSAGE="Build and Push Failed: There was an error while building or pushing the Docker images."
          DOCKER_REPO_NAME="prsm323"  # Set your Docker Hub username
          # Construct the services and their respective Docker repository names with tags
          DOCKER_IMAGES=""
          
          if [[ "$CHANGED_SERVICES" == *"application"* ]]; then
            DOCKER_IMAGES="${DOCKER_IMAGES} prsm323/application:$TAG"
          fi
          
          if [[ "$CHANGED_SERVICES" == *"benefits"* ]]; then
            DOCKER_IMAGES="${DOCKER_IMAGES} prsm323/benefits:$TAG"
          fi
          
          if [[ "$CHANGED_SERVICES" == *"customer"* ]]; then
            DOCKER_IMAGES="${DOCKER_IMAGES} prsm323/customer:$TAG"
          fi
          # Determine the success or failure message based on the exit status
          if [ $? -eq 0 ]; then
            MESSAGE="$SUCCESS_MESSAGE Repository: $DOCKER_REPO_NAME, PUSHED: $DOCKER_IMAGES."
          else
            MESSAGE="$FAILURE_MESSAGE Please check the logs."
          fi
          # Send message to Teams
          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\":\"$MESSAGE\"}" ${{ secrets.TEAMS_WEBHOOK_URL }}

  deploy-to-eks:
    needs: build-and-push  # Ensure the deploy job runs after the build-and-push job
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Helm chart repository
      - name: Checkout Helm Chart Repo
        uses: actions/checkout@v4
        with:
          repository: Ramesh-Kumhar/DIGIT-DevOps
          path: helm-charts
          ref: DIGIT-2.9LTS  # Specify the branch to check out

      # Step 2: Set up Helm and kubectl
      - name: Set up Helm and kubectl
        run: |
          curl -LO https://get.helm.sh/helm-v3.9.1-linux-amd64.tar.gz
          tar -zxvf helm-v3.9.1-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          curl -LO "https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      # Step 3: Update the tag in Helm chart configuration files
      - name: Update Helm Chart Docker Image Tags
        run: |
          echo "Updating Helm chart Docker image tags in the repository"
          
          # Update image tag for the 'application' service
          if [[ "$CHANGED_SERVICES" == *"application"* ]]; then
            echo "Updating application image tag"
            sed -i "s|image: prsm323/application:.*|image: prsm323/application:${{ env.IMAGE_TAG }}|g" helm-charts/deploy-as-code/charts/uba/backend/application/values.yaml
          fi
          
          # Update image tag for the 'benefits' service
          if [[ "$CHANGED_SERVICES" == *"benefits"* ]]; then
            echo "Updating benefits image tag"
            sed -i "s|image: prsm323/benefits:.*|image: prsm323/benefits:${{ env.IMAGE_TAG }}|g" helm-charts/deploy-as-code/charts/uba/backend/benefits/values.yaml
          fi
          
          # Update image tag for the 'customer' service
          if [[ "$CHANGED_SERVICES" == *"customer"* ]]; then
            echo "Updating customer image tag"
            sed -i "s|image: prsm323/customer:.*|image: prsm323/customer:${{ env.IMAGE_TAG }}|g" helm-charts/deploy-as-code/charts/uba/backend/customer/values.yaml
          fi

      # Step 4: Deploy to EKS using Helm
      - name: Deploy to EKS using Helm
        run: |
          # Set up kubectl config for your EKS cluster
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          
          # Deploy services using Helm upgrade/install for each service based on changes
          if [[ "$CHANGED_SERVICES" == *"application"* ]]; then
            helm upgrade --install uba-backend-application helm-charts/deploy-as-code/charts/uba/backend/application --egov backend --set image.tag=${{ env.IMAGE_TAG }}
          fi
          
          if [[ "$CHANGED_SERVICES" == *"benefits"* ]]; then
            helm upgrade --install uba-backend-benefits helm-charts/deploy-as-code/charts/uba/backend/benefits --egov backend --set image.tag=${{ env.IMAGE_TAG }}
          fi
          
          if [[ "$CHANGED_SERVICES" == *"customer"* ]]; then
            helm upgrade --install uba-backend-customer helm-charts/deploy-as-code/charts/uba/backend/customer --egov backend --set image.tag=${{ env.IMAGE_TAG }}
          fi

      # Step 5: Notify Success or Failure to Teams
      - name: Send Success or Failure Message to Teams
        run: |
          TAG="${{ env.IMAGE_TAG }}"
          SUCCESS_MESSAGE="EKS Deployment Successful: Service deployed with image tag $TAG."
          FAILURE_MESSAGE="EKS Deployment Failed: Please check the Helm logs."
          # Construct message
          if [ $? -eq 0 ]; then
            MESSAGE="$SUCCESS_MESSAGE"
          else
            MESSAGE="$FAILURE_MESSAGE"
          fi
          # Send message to Teams
          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\":\"$MESSAGE\"}" ${{ secrets.TEAMS_WEBHOOK_URL }}
